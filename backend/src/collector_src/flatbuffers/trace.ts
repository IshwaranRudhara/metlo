// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Meta } from './trace/meta.js';
import { Request } from './trace/request.js';
import { Response } from './trace/response.js';


export class Trace {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Trace {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrace(bb:flatbuffers.ByteBuffer, obj?:Trace):Trace {
  return (obj || new Trace()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrace(bb:flatbuffers.ByteBuffer, obj?:Trace):Trace {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Trace()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

request(obj?:Request):Request|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Request()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

response(obj?:Response):Response|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Response()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

meta(obj?:Meta):Meta|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Meta()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTrace(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRequest(builder:flatbuffers.Builder, requestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, requestOffset, 0);
}

static addResponse(builder:flatbuffers.Builder, responseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, responseOffset, 0);
}

static addMeta(builder:flatbuffers.Builder, metaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, metaOffset, 0);
}

static endTrace(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
