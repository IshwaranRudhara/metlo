// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Meta {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Meta {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMeta(bb:flatbuffers.ByteBuffer, obj?:Meta):Meta {
  return (obj || new Meta()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMeta(bb:flatbuffers.ByteBuffer, obj?:Meta):Meta {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Meta()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

environment():string|null
environment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
environment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

incoming():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sourcePort():string|null
sourcePort(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourcePort(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

destination():string|null
destination(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
destination(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

destinationPort():string|null
destinationPort(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
destinationPort(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

metloSource():string|null
metloSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
metloSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMeta(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addEnvironment(builder:flatbuffers.Builder, environmentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, environmentOffset, 0);
}

static addIncoming(builder:flatbuffers.Builder, incoming:boolean) {
  builder.addFieldInt8(1, +incoming, +false);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sourceOffset, 0);
}

static addSourcePort(builder:flatbuffers.Builder, sourcePortOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, sourcePortOffset, 0);
}

static addDestination(builder:flatbuffers.Builder, destinationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, destinationOffset, 0);
}

static addDestinationPort(builder:flatbuffers.Builder, destinationPortOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, destinationPortOffset, 0);
}

static addMetloSource(builder:flatbuffers.Builder, metloSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, metloSourceOffset, 0);
}

static endMeta(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMeta(builder:flatbuffers.Builder, environmentOffset:flatbuffers.Offset, incoming:boolean, sourceOffset:flatbuffers.Offset, sourcePortOffset:flatbuffers.Offset, destinationOffset:flatbuffers.Offset, destinationPortOffset:flatbuffers.Offset, metloSourceOffset:flatbuffers.Offset):flatbuffers.Offset {
  Meta.startMeta(builder);
  Meta.addEnvironment(builder, environmentOffset);
  Meta.addIncoming(builder, incoming);
  Meta.addSource(builder, sourceOffset);
  Meta.addSourcePort(builder, sourcePortOffset);
  Meta.addDestination(builder, destinationOffset);
  Meta.addDestinationPort(builder, destinationPortOffset);
  Meta.addMetloSource(builder, metloSourceOffset);
  return Meta.endMeta(builder);
}
}
