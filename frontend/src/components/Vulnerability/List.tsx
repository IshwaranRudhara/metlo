import React from "react"
import dynamic from "next/dynamic"
import { useRouter } from "next/router"
import { Badge, Text, useColorMode, Button } from "@chakra-ui/react"
import EmptyView from "components/utils/EmptyView"
import { TableColumn } from "react-data-table-component"
import { RISK_TO_COLOR } from "~/constants"
import { getCustomStyles, rowStyles } from "components/utils/TableUtils"
import { VulnerabilityAggItem } from "@common/types"
import { GetVulnerabilityAggParams } from "@common/api/summary"
const DataTable = dynamic(() => import("react-data-table-component"), {
  ssr: false,
})

const PAGE_SIZE = 10

interface VulnerabilityTableProps {
  items: VulnerabilityAggItem[]
  params: GetVulnerabilityAggParams
}

const List: React.FC<VulnerabilityTableProps> = React.memo(
  ({ items, params }) => {
    const colorMode = useColorMode()
    const router = useRouter()
    const columns: TableColumn<VulnerabilityAggItem>[] = [
      {
        name: "Risk Score",
        sortable: true,
        selector: (row: VulnerabilityAggItem) => row.risk,
        cell: (row: VulnerabilityAggItem) => (
          <Badge
            p="1"
            fontSize="sm"
            fontWeight="medium"
            colorScheme={RISK_TO_COLOR[row.risk]}
            pointerEvents="none"
          >
            {row.risk}
          </Badge>
        ),
        id: "risk",
      },
      {
        name: "Type",
        sortable: true,
        selector: (row: VulnerabilityAggItem) => row.type,
        cell: (row: VulnerabilityAggItem) => (
          <Text py={2} fontWeight="medium" color="gray.900">
            {row.type}
          </Text>
        ),
        id: "type",
        grow: 3,
      },
      {
        name: "Count",
        sortable: true,
        selector: (row: VulnerabilityAggItem) => row.count,
        right: true,
        id: "count",
      },
      {
        name: "Endpoints",
        sortable: true,
        selector: (row: VulnerabilityAggItem) => row.numEndpoints,
        id: "numEndpoints",
        right: true,
      },
      {
        name: "Hosts",
        sortable: true,
        selector: (row: VulnerabilityAggItem) => row.numHosts,
        id: "numHosts",
        right: true,
      },
      {
        name: "",
        sortable: false,
        cell: (row: VulnerabilityAggItem) => (
          <Button
            size="xs"
            fontWeight="medium"
            variant="createSecondary"
            onClick={() =>
              router.push({
                pathname: "/alerts",
                query: {
                  alertTypes: row.type,
                  hosts: params.hosts?.length
                    ? params.hosts.join(",")
                    : undefined,
                },
              })
            }
          >
            View
          </Button>
        ),
        id: "view",
        right: true,
      },
    ]

    if (items.length == 0) {
      return <EmptyView text="No results found." />
    }
    if (items.length > 0) {
      return (
        <DataTable
          style={rowStyles}
          paginationComponentOptions={{ noRowsPerPage: true }}
          paginationTotalRows={items.length}
          paginationPerPage={PAGE_SIZE}
          columns={columns}
          data={items}
          customStyles={getCustomStyles(colorMode.colorMode, false, true)}
          pagination
        />
      )
    }
    return null
  },
)

export default List
